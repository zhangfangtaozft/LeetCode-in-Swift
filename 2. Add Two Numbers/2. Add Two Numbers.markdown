
# 2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1] 

# 思路

我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。



图1，对两数相加方法的可视化: 342+465=807342+465=807，每个结点都包含一个数字，并且数字按位逆序存储。

# Code

```swift
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {
        var l1 = l1
        var l2 = l2
        
        var head: ListNode? = ListNode(0)
        let root = head
        
        var carry = 0
        while l1 != nil || l2 != nil || carry != 0 {
            var sum = 0
            if l1 != nil {
                sum += l1!.val
                l1 = l1!.next
            }
            
            if l2 != nil {
                sum += l2!.val
                l2 = l2!.next
            }
            let val: Int
            (carry, val) = ((sum + carry) / 10, (sum + carry) % 10)
            head?.next = ListNode(val)
            head = head?.next
        }
        return root?.next
    }
}
```